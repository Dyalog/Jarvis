 r←HtmlPage req;endpoints;j
 :Access public
 j←req.Server
 →Skip⊣r←j.ScriptFollows
⍝<!DOCTYPE html>
⍝<html>
⍝<head>
⍝<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
⍝<link rel="icon" href="data:,">
⍝<title>JAWS</title>
⍝ <style>
⍝   body {color:#000000;background-color:white;font-family:Verdana;margin-left:0px;margin-top:0px;}
⍝   button {display:inline-block;font-size:1.1em;}
⍝   legend {font-size:1.1em;}
⍝   select {font-size:1.1em;}
⍝   label  {display:inline-block;margin-bottom:7px;}
⍝   div {padding:5px;}
⍝   label input textarea button #result {display:flex;}
⍝   textarea {width:100%;font-size:18px;}
⍝   .result {font-size:18px;}
⍝   .result code {white-space:pre-line;word-wrap:break-word;}
⍝ </style>
⍝</head>
⍝<body>
⍝<div id="content">
⍝<fieldset>
⍝  <legend>Request</legend>
⍝  <form id="myform">
⍝    <div>
⍝      <label for="function">Endpoint:</label>
⍝      ⍠
⍝    </div>
⍝    <div>
⍝      <label for="payload">JSON Payload:</label>
⍝      <textarea id="payload" name="payload"></textarea>
⍝    </div>
⍝    <div>
⍝      <button onclick="doit()" type="button">Send via HTTP</button>
⍝      <button id="wsButton" style="visibility:hidden" onclick="wsdoit()" type="button">Send via WebSocket</button>
⍝      <button id="wsSubButton" style="visibility:hidden" onclick="wsSubscribe()" type="button">Subscribe</button>
⍝      <button id="wsUnsubButton" style="visibility:hidden" onclick="wsUnsubscribe()" type="button">Unsubscribe</button>
⍝    </div>
⍝  </form>
⍝</fieldset>
⍝<fieldset>
⍝  <legend>Response</legend>
⍝  <div class="result" id="result">
⍝  </div>
⍝</fieldset>
⍝<fieldset id="wsFields" style="visibility:hidden">
⍝  <legend>WebSocket Response</legend>
⍝  <div class="result" id="wsResult">
⍝  </div>
⍝</fieldset>
⍝<fieldset id="wsSubscribeFields" style="visibility:hidden">
⍝  <legend>WebSocket Subscription</legend>
⍝  <div id="wsSubscribeDiv">
⍝  </div>
⍝</fieldset>
⍝<script>
⍝function doit() {
⍝    document.getElementById("result").innerHTML = "";
⍝    var payload = document.getElementById("payload").value;
⍝    var parses = false;
⍝    try {
⍝        var json = JSON.parse(payload);
⍝        parses = true;
⍝    } finally {
⍝        if (!parses) {
⍝            document.getElementById("result").innerHTML = "<span style='color:red;'>Please enter a valid JSON payload</span>";
⍝        } else {
⍝            var xhttp = new XMLHttpRequest();
⍝            var fn = document.getElementById("function").value;
⍝            fn = (0 == fn.indexOf('/')) ? fn : '/' + fn;
⍝
⍝            xhttp.open("POST", fn, true);
⍝            xhttp.setRequestHeader("content-type", "application/json; charset=utf-8");
⍝
⍝            xhttp.onreadystatechange = function () {
⍝                if (this.readyState == 4) {
⍝                    if (this.status == 200) {
⍝                        try {
⍝                            var resp = "<pre><code>" + JSON.stringify(JSON.parse(this.responseText)) + "</code></pre>";;
⍝                        }
⍝                        catch (err) {
⍝                            var resp = "<pre><code>" + this.responseText + "</code></pre>";
⍝                        }
⍝                    } else {
⍝                        var resp = "<span style='color:red;'>" + this.statusText + "</span> <pre><code>" + this.responseText + "</code></pre>";
⍝                    }
⍝                    document.getElementById("result").innerHTML = resp;
⍝                }
⍝            }
⍝            xhttp.send(document.getElementById("payload").value);
⍝        }
⍝    }
⍝}
⍝function wsdoit() {
⍝    document.getElementById("wsResult").innerHTML = "";
⍝    var payload = document.getElementById("payload").value;
⍝    var parses = false;
⍝    try {
⍝        var json = JSON.parse(payload);
⍝        parses = true;
⍝    } finally {
⍝        if (!parses) {
⍝            document.getElementById("wsResult").innerHTML = "<span style='color:red;'>Please enter a valid JSON payload</span>";
⍝        } else {
⍝            var fn = document.getElementById("function").value;
⍝            fn = (0 == fn.indexOf('/')) ? fn : '/' + fn;
⍝            var msg = {};
⍝            msg.Endpoint = fn;
⍝            msg.Payload = json;
⍝            msg.Type = "Endpoint";
⍝            ws.send(JSON.stringify(msg));
⍝        }
⍝    }
⍝}
⍝function wsSubscribe() {
⍝  var msg = {};
⍝  msg.Type = "Subscribe";
⍝  ws.send(JSON.stringify(msg));
⍝}
⍝function wsUnsubscribe() {
⍝  var msg = {};
⍝  msg.Type = "Unsubscribe";
⍝  ws.send(JSON.stringify(msg));
⍝}
⍝var ws;                                                                               0
⍝ws = new WebSocket("ws://localhost:⍴/");
⍝ws.onopen = function(evt) { onOpen(evt) };
⍝ws.onclose = function(evt) { onClose(evt) };
⍝ws.onmessage = function(evt) { onMessage(evt) };
⍝ws.onerror = function(evt) { onError(evt) };
⍝
⍝function onOpen(evt){
⍝  document.getElementById("wsButton").style.visibility = "visible";
⍝  document.getElementById("wsFields").style.visibility = "visible";
⍝  document.getElementById("wsSubButton").style.visibility = "visible";
⍝  document.getElementById("wsUnsubButton").style.visibility = "visible";
⍝  document.getElementById("wsSubscribeFields").style.visibility = "visible";};
⍝function onClose(evt){console.log("WebSocket closed");};
⍝function onError(evt){console.log("WebSocket error");};
⍝
⍝function onMessage(evt){
⍝  let payload = JSON.parse(evt.data);
⍝  switch (payload.Type){
⍝    case "Asynch":
⍝      document.getElementById("wsResult").innerHTML =  "<br/><pre><code>" + JSON.stringify(payload.Data) + "</code></pre>";
⍝    break;
⍝    case "Update":
⍝      document.getElementById("wsSubscribeDiv").innerHTML = "<br/>" + payload.Data;
⍝    break;
⍝    default:
⍝      document.getElementById("result").innerHTML = "<br/><span style='color:red;'>Invalid message type</span>";
⍝  }
⍝}
⍝</script>
⍝</div>
⍝</body>
⍝</html>
Skip:
 endpoints←j.({⍵/⍨0=CheckFunctionName ⍵}EndPoints CodeLocation)
 :If 0∊⍴endpoints
     endpoints←'<b>No Endpoints Found</b>'
 :Else
     endpoints←∊{'<option value="',⍵,'">',⍵,'</option>'}¨'/'@('.'=⊢)¨endpoints
     endpoints←'<select id="function" name="function">',endpoints,'</select>'
 :EndIf
 r←endpoints{i←⍵⍳'⍠' ⋄ ((i-1)↑⍵),⍺,i↓⍵}r
 r←(⍕j.Port){i←⍵⍳'⍴' ⋄ ((i-1)↑⍵),⍺,i↓⍵}r
 r←⎕UCS'UTF-8'⎕UCS r
